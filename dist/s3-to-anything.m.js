var e=require("util"),r=require("async"),o=require("./s3-event-parser"),t=function(r){console.log("Reading options from event:\n",e.inspect(r,{depth:5})),this.observers=[];var t=o.parse(r);this.srcBucket=t.bucketName,this.srcKey=t.filePath,this.keyPrefix=t.filePrefix,console.log("srcBucket :\n",this.srcBucket),console.log("srcKey :\n",this.srcKey),console.log("keyPrefix :\n",this.keyPrefix)};t.prototype.process=function(e){var o=this,t=e||function(){return null};return this.isProcessAllowed()?(console.log("Processing"),r.waterfall([function(e){return o.downloadFile(e)},function(e,r){return o.notifyObservers(e,r)}],function(e){return e?(console.error(e),t(e)):(console.log("Process completed."),t(null,!0))})):(console.warn("File prefix not supported. Skiping process."),t(null,!0))},t.prototype.notifyObservers=function(e,r){return this.observers.map(function(r){return r(e)}),r(null,e)},t.prototype.setS3Client=function(e){return this.s3Client=e,this},t.prototype.downloadFile=function(e){if(void 0===this.s3Client)throw new Error("S3Client has not been set.");return console.info("Download file from S3"),this.s3Client.download(this.srcBucket,this.srcKey,e)},t.prototype.addObserver=function(e){return this.observers.push(e),this},t.prototype.isProcessAllowed=function(){return this.keyPrefix===process.env.S3_ALLOWED_PREFIX};export default t;
//# sourceMappingURL=s3-to-anything.m.js.map
